#!/usr/bin/env python3
import asyncio
import time
import paho.mqtt.client as mqtt
from bleak import BleakClient, BleakScanner, BleakError

ADDRESS = "MAC adresas"
CHAR_UUID = "xxxxxx"

MQTT_BROKER = "xxxxxx"
MQTT_PORT = 1883
MQTT_TOPIC = "home/sensors/temp"
MQTT_USER = "xxxxxx"
MQTT_PASS = "xxxxxx"

# MQTT setup
client_mqtt = mqtt.Client(client_id="", protocol=mqtt.MQTTv311)
client_mqtt.username_pw_set(MQTT_USER, MQTT_PASS)

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ MQTT prisijungta sƒókmingai")
    else:
        print(f"‚ùå MQTT klaida prisijungiant: {rc}")

def on_disconnect(client, userdata, rc):
    print("‚ö†Ô∏è MQTT atjungta, bandau prisijungti i≈° naujo...")
    reconnect_mqtt()

def reconnect_mqtt():
    while True:
        try:
            client_mqtt.connect(MQTT_BROKER, MQTT_PORT, 60)
            print("üîÑ MQTT prisijungta i≈° naujo")
            break
        except Exception as e:
            print(f"‚ùå Nepavyko prisijungti prie MQTT: {e}, kartosiu po 5s...")
            time.sleep(5)

client_mqtt.on_connect = on_connect
client_mqtt.on_disconnect = on_disconnect
reconnect_mqtt()
client_mqtt.loop_start()

# BLE callback
def handle_notify(sender, data: bytearray):
    try:
        temp_c = int.from_bytes(data[:2], byteorder="little", signed=True) / 100
        print(f"üå°Ô∏è Temperat≈´ra: {temp_c:.2f} ¬∞C")

        client_mqtt.publish(MQTT_TOPIC, f"{temp_c:.2f}")
    except Exception as e:
        print(f"‚ùå Klaida dekoduojant duomenis: {e}")

# BLE reconnect logika
async def connect_ble():
    while True:
        try:
            print("üîç Pradedamas BLE skanavimas...")
            device = await BleakScanner.find_device_by_address(ADDRESS, timeout=20)
            if not device:
                print("‚ùå ƒÆrenginys nerastas, kartoju po 10s...")
                await asyncio.sleep(10)
                continue

            async with BleakClient(device, timeout=30.0) as client:
                print("‚úÖ Prisijungta prie ƒØrenginio!")

                await client.start_notify(CHAR_UUID, handle_notify)
                print("üì° Laukiu duomen≈≥ (nutrauk su CTRL+C)...")

                while True:
                    await asyncio.sleep(10)

        except BleakError as e:
            print(f"‚ö†Ô∏è BLE ry≈°io klaida: {e}, bandau i≈° naujo po 5s...")
            await asyncio.sleep(5)
        except Exception as e:
            print(f"‚ùå Nenumatyta klaida: {e}, bandau i≈° naujo po 5s...")
            await asyncio.sleep(5)

async def main():
    await connect_ble()

asyncio.run(main())
